CloudOS
-------

This is a prototype kernel that is bootable by qemu. Its eventual purpose is to
run CloudABI[0] binaries, including the ability to suspend, freeze, serialize,
deserialize, thaw and resume CloudABI binaries. However, it's still far from
that goal.

[0] https://www.bsdcan.org/2015/schedule/track/Security/524.en.html

To run the tests, compile it with a native (non-cross) compiler:

  mkdir build
  cd build
  cmake -DCMAKE_BUILD_TYPE=Debug ..
  make
  make test

To compile the kernel, first build and install Binutils with '--target
i686-elf', so that you have the GNU linker in your $PATH as i686-elf-ld. Also,
follow the instructions at https://nuxi.nl/ to install the CloudABI toolchain,
which requires a trunk Clang+LLVM. After this, you should also have Clang in
your $PATH as i686-unknown-cloudabi-cc.

The kernel will use the CloudABI-clang compiler to build its source files, even
though they are not true CloudABI source files, because it's easier. It
requires the GNU linker because LLD doesn't support linker scripts yet.

Use the i686-elf toolchain file to set up your build directory for a native
build:

  mkdir build
  cd build
  cmake -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchain-i686-elf.cmake ..
  make

There is a 'boot' target that will run the kernel inside qemu:

  make boot

You can also boot the kernel in Bochs by finding a Grub 0.96 stage1 + stage2
(Grub 0.97 did not work for me), then running:

  dd if=/dev/zero of=pad bs=1 count=750
  cat stage1 stage2 pad build/cloudkernel >floppy.img
  cat <<EOF >bochsrc.txt
  boot: floppy
  floppya: 1_44="floppy.img", status=inserted
  EOF
  bochs

Inside bochs, run "c" to start booting, then in GRUB, run:

  kernel 200+200
  boot

Good luck and have fun!

- Sjors Gielen <sjors@sjorsgielen.nl>
